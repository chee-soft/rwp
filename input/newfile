h1. Процесс разработки

{{toc}}

h2. Описание процесса

Разработка SugarCRM ведётся на локальных машинах (на схеме — developer). Разрабочики тестируют код локально, затем отправляют код на тестовый сервер (scar), где повторно его тестируют.

Тестировщик приступает к работе только тогда, когда новый код протестирован разработчиком. При неуспешном тестировании код отправляется на доработку.

Если тестирование пройдено, тестировщик заливает код на клиентский сервер. Возможны три сценария:

* клиент арендует место на нашем сервере (на схеме — sugarcrmonline)
* у клиента собственный сервер на Linux
* у клиента собственный сервер на Windows

В первых двух случаях заливка осуществляется по протоколу ssh с отдельного сервера (на схеме — iago).  Доступ к репозиторию разрешён только для клиентского сервера.

В последнем случае заливка осуществляется по протоколу http с тестового сервера (на схеме — scar). Репозиторий находится в публичном доступе.

!sugarcrm_network.png!

h2. Развёртывание проекта

h3. Клонирование существующего проекта

Если проект уже развёрнут на @scar@, нужно склонировать его на локальную машину:

<pre><code class="bash">
hg clone http://scar/hg/myproject
</code></pre>

Затем следует скопировать файл @config.php@ из директории проекта на @scar@ в директорию проекта на локальной машине:

<pre><code class="bash">
scp crmadmin@scar:/var/www/html/myproject/config.php ./myproject
</code></pre>

Теперь нужно поправить адрес сервера в параметрах @site_url@ и @host_name@:

<pre><code class="bash">
sed -i 's/scar/my-local-ip/g' myproject/config.php
</code></pre>

Также необходимо скопировать базу данных. Это можно сделать как с помощью @phpmyadmin@, так и через консоль.

Возьмём дамп базы с сервера scar и заархивируем его:

    mysqldump -hscar -uroot -p myproject | gzip > dump.sql.gz

Скопируем файл на локальную машину, разархивируем его и импортируем в заранее созданную базу:

<pre><code class="bash">
mysqladmin -uroot -p create myproject
zcat dump.sql.gz | mysql -uroot -p myproject
</code></pre>

Осталось убедиться, что пользователь, из-под которого запущен веб-сервер, имеет права на чтение и запись в папку с проектом и её подпапки.

Авторизуемся в SugarCRM и выполним полное восстановление системы.

h3. Создание нового проекта

Процесс создания нового проекта отличается от процесса клонирования существующего проекта только тем, что сначала нужно развернуть проект на scar.

**Это важно**:

* Название проекта и базы данных должно совпадать с идентификатором проекта в @Redmine@.
* После копирования проект нужно перключить на ветку default и слить с веткой пакета или Новой версии.

Клонируем проект из Новой версии или пакета.

<pre><code class="bash">
cd /var/www/html
cp -R sugar-new-version myproject
cd myproject
</code></pre>

Исходный проект должен быть зафиксирован в названии проекта в @Redmine@. Например, если мы создаём проект из Новой версии, в @Redmine@ проект должен называться @'My new project < SNV'@.

Меняем в конфиге название проекта в параметрах @db_name@ и @site_url@:

<pre><code class="bash">
sed -i '/s/sugar-new-version/myproject/g' config.php
</code></pre>

Копируем базу данных. Это можно сделать как с помощью @phpmyadmin@, так и через консоль:

<pre><code class="bash">
mysql -uroot -p
    create database `myproject`
    exit
mysqldump -uroot -p -- sugar-new-version > snv.sql
mysql -uroot -p -- myproject < snv.sql
</code></pre>

Переключаемся на ветку default и сливаем её с веткой snv:

<pre><code class="bash">
hg update default
hg merge snv
hg commit -m 'snv update'
</code></pre>

Теперь нужно сделать так, чтобы репозиторий был доступен по адресу @http://scar/hg/myproject@. Для этого добавим строчку в файл @/var/www/hg/hgweb.config@:

<pre><code class="bash">
echo 'myproject = /var/www/html/myproject' >> /var/www/hg/hgweb.config
</code></pre>

Авторизуемся в SugarCRM и выполним полное восстановление системы.

h2. Манипуляции над проектом

h3. Внесение правок в проект

Для начала получим все последние изменения со scar:

    hg pull --update

Теперь можно вносить изменения в файлы.

    echo 'hello' > my-new-file.txt

Чтобы репозиторий начал отслеживать новые и перестал отслеживать старые файлы, выполним команду @addremove@:

    hg addremove

Создадим ревизию:

    hg commit -m 'add my-new-file.txt'

Перед заливкой ещё раз проверим, есть ли изменения на scar. Если есть, выполним слияние:

<pre><code class="bash">
hg pull
hg merge
hg commit -m merge
</code></pre>

Наконец, отправим свои изменения на scar:

    hg push

Чтобы изменения применились на scar, нужно подключиться к нему по ssh и выполнить команду @update@:

<pre><code class="bash">
ssh crmadmin@scar
hg update
</code></pre>

Обязательным этапом является тестирование внесённых изменений непосредственно на scar.

Все дополнительные действия для применения изменений (например, добавление параметра в конфиг) должны быть перечислены в комментариях к задаче.

h3. Слияние (merge)

Все слияния выполняются _только_ на локальной машине.

Перед выполнением слияния необходимо убедиться, что на машине установлена утилита "kdiff3":http://kdiff3.sourceforge.net/. В Ubuntu её можно установить из репозитория:

    sudo apt-get install kdiff3

При слиянии ревизий, принадлежащих к одной ветке (это наиболее распространённый случай), можно просто выполнить команду merge:

    hg merge

Если необходимо слить ревизии из разных веток (например, при подтягивании изменений из Новой версии), необходимо явно указывать ревизию, с которой осуществляется слияние:

    hg merge snv

После выполнения слияния необходимо создать ревизию. Ревизия будет относиться к той ветке, в которой находился репозитория до слияния:

<pre><code class="bash">
hg update default
hg merge snv
hg commit -m "snv update"
hg branch
</code></pre>

Последняя команда выведет @default@.

h3. Подтягивание изменений из Новой версии

Описанный ниже алгоритм используется для того, чтобы автоматизировать перенос исправлений ошибок и добавленных функций из Новой версии в клиентский версии.

Все действия проводятся только на машине разработчика. На тестовых серверах обычно отсутствуют программы для ручного слияния веток, что сильно затрудняет процесс обновления.

Для начала нужно убедиться в том, что репозитории Новой версии на тестовом сервере и на машине разработчика полностью совпадают:

<pre><code class="bash">
cd sugar-new-version
hg inc
hg out
</code></pre>

Если различия есть, до перехода к следующему шагу репозитории необходимо синхронизировать.

Теперь нужно узнать, на какой версии основана версия клиента: непосредственно на Новой версии или на одном из трёх модулей.

<pre><code class="bash">
cd myproject
hg heads
</code></pre>

Среди выведенных голов должна присутствовать как минимум одна с веткой **snv**. Если нет — вам достался старый проект, не поддерживающий обновления. Лучше его не трогать. Если присутствует одна из ветвей **snv-start** или **snv-profi** — версия основана на одноимённом пакете.

Также эту информацию можно плучить из редмайна. Если проект называется **myproject < SNV** — он основан на Новой версии. Если название выглядит как **myproject < SNV Profi** — на пакете SNV Profi.

Если версия основана на одном из пакетов, первым делом проверим, что версии репозиториев пакета синхронизированы, и устраним различия, если они есть:

<pre><code class="bash">
cd snv-profi
hg inc
hg out
</code></pre>

Затем подтянем изменения из Новой версии в репозиторий пакета на машине разработчика и синхронизируем его с репозиторием на тестовом сервере.

<pre><code class="bash">
cd snv-profi
hg pull http://scar/hg/sugar-new-version
hg merge snv
hg commit -m "snv update"
hg push
</code></pre>

После этого можно обновлять версию клиента. Убедимся в том, что репозиторий клиентской версии синхронизирован:

<pre><code class="bash">
cd myproject
hg inc
hg out
</code></pre>

Подтянем изменения из репозитория пакета:

<pre><code class="bash">
cd myproject
hg pull http://scar/hg/snv-profi
hg merge snv-profi
hg commit -m "snv-profi update"
hg push
</code></pre>

В результате успешно выполненного обновления мы должны увидеть аккуратный граф:

!graph.png!

h2. Взаимодействие с клиентскими серверами

h3. Собственный сервер на Linux

h4. Подготовка окружения клиента

Создать пользователя _sugar_, установить пароль (команды выполняются из-под админа).

<pre>
    useradd sugar
    passwd sugar
</pre>

Добавить пользователя, из-под которого работает веб-сервер (_www-data_, _apache_ либо _httpd_), в основную группу пользователя _sugar_ и наоборот (команды выполняются из-под админа).

<pre>
    usermod -G sugar www-data
    usermod -G www-data sugar
</pre>

Создать папку, куда впоследствии будет помещён инстанс (обычно, @/var/www/html/<название инстанса>@). Назначить пользователя _sugar_ владельцем этой папки (команды выполняются из-под админа).

<pre>
    mkdir /var/www/html/<название инстанса>
</pre>

Если нет возможности добавить пользователя в группу веб-сервера, попросить администратора установить такие права, чтобы создаваемым внутри папки с SugarCRM файлам задавалась группа пользователя _sugar_.

Сгенерировать для пользователя _sugar_ пару RSA ключей (команды выполняются из-под sugar).

<pre>
    mkdir ~/.ssh
    chmod 700 ~/.ssh
    ssh-keygen -t rsa
</pre>

h4. Подготовка окружения на iago

Скопировать репозиторий с scar на @iago@ (команды выполняются из-под @crmadmin@ на scar).

<pre>
    cd /var/www/<название инстанса>
    hg clone ./ ssh://hg@vedisoft.convex.ru/<название инстанса>
</pre>

Настроить доступ для клиента (команды выполняются из-под @crmadmin@ на scar).

<pre>
    cd /var/www/hg/hgadmin
    hg pull --update
    mkdir keys/<название инстанса>
    scp sugar@<сервер клиента>:/home/sugar/.ssh/rsa_pub keys/<название инстанса>
    echo "read repo=<название инстанса> user=<название инстанса>/*" >> access.conf
    hg add
    hg ci -m "<название инстанса> added"
    hg push
</pre>

h4. Клонирование репозитория

Клонировать репозиторий в папку @<название инстанса>@ (команды выполняются из-под _sugar_).

<pre>
    cd <название инстанса>
    hg clone ssh://hg@vedisoft.convex.ru/<название инстанса> ./
</pre>

Установить для файлов и каталогов права 664 и 775 соответственно (команды выполняются из-под _root_).

<pre>
    chmod -R o=rX,ug=rwX
</pre>

Не менее двух раз выполнить восстановление в SugarCRM. Если необходимо, выполнить запрос в базу.

Репозиторий доступен извне по адресу @ssh://hg@vedisoft.convex.ru/hg/myproject@.

h3. Собственный сервер на Windows

Нужно открыть доступ к репозиторию на scar извне с помощью "обратного проксирования":http://aurora/wiki/doku.php?id=iptables_%D0%B8_reverse_proxy.

Для этого заходим на ariel (192.168.0.1):

    ssh root@ariel

Добавляем условие в конфиг @/etc/nginx/sites-enabled/sugarcrm@:

<pre><code class="nginx">
location /hg/myproject/ {
    proxy_pass http://scar/hg/myproject/;
}
</code></pre>

И перезапускаем nginx:

    service nginx restart

Репозиторий доступен извне по адресу @http://vedisoft.convex.ru/hg/myproject@.

h2. FAQ

h3. Mercurial

h4. Как отменить неудачный merge

h4. Как удалить все неотслеживаемые файлы?
